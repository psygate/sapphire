/**
 * This class is generated by jOOQ
 */
package com.psygate.minecraft.spigot.sovereignty.sapphire.db.model.tables;


import com.psygate.minecraft.spigot.sovereignty.nucleus.sql.util.UUIDByteConverter;
import com.psygate.minecraft.spigot.sovereignty.sapphire.db.model.Keys;
import com.psygate.minecraft.spigot.sovereignty.sapphire.db.model.Nucleus;
import com.psygate.minecraft.spigot.sovereignty.sapphire.db.model.tables.records.SapphireTowerRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SapphireTower extends TableImpl<SapphireTowerRecord> {

	private static final long serialVersionUID = 1987787801;

	/**
	 * The reference instance of <code>nucleus.sapphire_tower</code>
	 */
	public static final SapphireTower SAPPHIRE_TOWER = new SapphireTower();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<SapphireTowerRecord> getRecordType() {
		return SapphireTowerRecord.class;
	}

	/**
	 * The column <code>nucleus.sapphire_tower.tower_id</code>.
	 */
	public final TableField<SapphireTowerRecord, Long> TOWER_ID = createField("tower_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>nucleus.sapphire_tower.group_id</code>.
	 */
	public final TableField<SapphireTowerRecord, Long> GROUP_ID = createField("group_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>nucleus.sapphire_tower.x</code>.
	 */
	public final TableField<SapphireTowerRecord, Integer> X = createField("x", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>nucleus.sapphire_tower.y</code>.
	 */
	public final TableField<SapphireTowerRecord, Integer> Y = createField("y", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>nucleus.sapphire_tower.z</code>.
	 */
	public final TableField<SapphireTowerRecord, Integer> Z = createField("z", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>nucleus.sapphire_tower.world_uuid</code>.
	 */
	public final TableField<SapphireTowerRecord, UUID> WORLD_UUID = createField("world_uuid", org.jooq.impl.SQLDataType.BINARY.length(16).nullable(false), this, "", new UUIDByteConverter());

	/**
	 * The column <code>nucleus.sapphire_tower.participant_size</code>.
	 */
	public final TableField<SapphireTowerRecord, Integer> PARTICIPANT_SIZE = createField("participant_size", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>nucleus.sapphire_tower.range_size</code>.
	 */
	public final TableField<SapphireTowerRecord, Integer> RANGE_SIZE = createField("range_size", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * Create a <code>nucleus.sapphire_tower</code> table reference
	 */
	public SapphireTower() {
		this("sapphire_tower", null);
	}

	/**
	 * Create an aliased <code>nucleus.sapphire_tower</code> table reference
	 */
	public SapphireTower(String alias) {
		this(alias, SAPPHIRE_TOWER);
	}

	private SapphireTower(String alias, Table<SapphireTowerRecord> aliased) {
		this(alias, aliased, null);
	}

	private SapphireTower(String alias, Table<SapphireTowerRecord> aliased, Field<?>[] parameters) {
		super(alias, Nucleus.NUCLEUS, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<SapphireTowerRecord, Long> getIdentity() {
		return Keys.IDENTITY_SAPPHIRE_TOWER;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<SapphireTowerRecord> getPrimaryKey() {
		return Keys.KEY_SAPPHIRE_TOWER_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<SapphireTowerRecord>> getKeys() {
		return Arrays.<UniqueKey<SapphireTowerRecord>>asList(Keys.KEY_SAPPHIRE_TOWER_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SapphireTower as(String alias) {
		return new SapphireTower(alias, this);
	}

	/**
	 * Rename this table
	 */
	public SapphireTower rename(String name) {
		return new SapphireTower(name, null);
	}
}
